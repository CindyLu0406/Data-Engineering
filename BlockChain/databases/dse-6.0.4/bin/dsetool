#!/bin/sh

if [ -z "$BASH_VERSION" ]; then
    exec bash "$0" "$@"
    exit 1  # Will only get here if exec itself fails to run
fi

export DSE_TOOL=1

if [ -f /etc/default/dse ]; then
  . /etc/default/dse
fi

# If we are going to use Hadoop configuration files to setup native connections to DSE...
hadoop_based_config="com.datastax.bdp.transport.client.HadoopBasedClientConfiguration"

# If we are going to use node yaml files to setup native connections to DSE...
yaml_based_config="com.datastax.bdp.config.YamlClientConfiguration"

client_config_impl="$yaml_based_config"

# JMX Port passed via cmd line args (-j 9999 or --jmxport=9999)
# should override the value from cassandra-env.sh
ARGS=""
JVM_ARGS=""
if [ -z "$SSL_FILE" ]; then
SSL_FILE=$HOME/.cassandra/nodetool-ssl.properties
fi
while true
do
  if [ ! $1 ]; then break; fi
  case $1 in
    -j)
      USER_JMX_PORT=$2
      shift
      ;;
    --jmxport=*)
      USER_JMX_PORT=$(echo $1 | cut -d '=' -f 2)
      ;;
    -a)
      dse_jmx_username=$2
      shift
      ;;
    --jmxusername)
      dse_jmx_username=$2
      shift
      ;;
    --jmxusername=*)
      dse_jmx_username=$(echo $1 | cut -d '=' -f 2)
      ;;
    -b)
      dse_jmx_password=$2
      shift
      ;;
    --jmxpassword)
      dse_jmx_password=$2
      shift
      ;;
    --jmxpassword=*)
      dse_jmx_password=$(echo $1 | cut -d '=' -f 2)
      ;;
    -l)
      dse_username=$2
      shift
      ;;
    --username)
      dse_username=$2
      shift
      ;;
    --username=*)
      dse_username=$(echo $1 | cut -d '=' -f 2)
      ;;
    -p)
      dse_password=$2
      shift
      ;;
    --password)
      dse_password=$2
      shift
      ;;
    --password=*)
      dse_password=$(echo $1 | cut -d '=' -f 2)
      ;;
    -f)
      DSERC_FILE="$2"
      shift
      ;;
    --config-file)
      DSERC_FILE="$2"
      shift
      ;;
    --config-file=*)
      DSERC_FILE=$(echo $1 | cut -d '=' -f 2)
      ;;
    -u)
      client_config_impl="$hadoop_based_config"
      ;;
    --use_hadoop_config)
      client_config_impl="$hadoop_based_config"
      ;;
    --ssl)
      if [ -f $SSL_FILE ]
      then
          SSL_ARGS=$(cat $SSL_FILE | tr '\n' ' ')
      fi
      JVM_ARGS="$JVM_ARGS -Dssl.enable=true $SSL_ARGS"
      #allow --ssl or --ssl true|false with result --ssl true|false
      if [ "$2" = "true" -o "$2" = "false" ];
      then
       ARGS="$ARGS $1"
      else
       ARGS="$ARGS $1 true"
      fi
      ;;
    *)
      ARGS="$ARGS $1"
      ;;
  esac
  shift
done

if [ "$DSE_ENV_LOADED" != 1 ]; then
    if [ -z "$DSE_ENV" ]; then
        for include in "$DSE_HOME"/bin/dse-env.sh \
                       "$HOME/.dse-env.sh" \
                       "`dirname "$0"`/dse-env.sh" \
                       "/etc/dse/dse-env.sh"; do
            if [ -r "$include" ]; then
                DSE_ENV="$include"
                break
            fi
        done
    fi

    if [ -z "$DSE_ENV" ]; then
        echo "DSE_ENV could not be determined."
        exit 1
    elif [ -r "$DSE_ENV" ]; then
        . "$DSE_ENV"
    else
        echo "Location pointed by DSE_ENV not readable: $DSE_ENV"
        exit 1
    fi
else
    #include the DSERC environment script (pulls in credentials for basic authentication)
    #note that it would be better if the functions were all grouped into a single script
    #that could get loaded by all other scripts
    if [ -r "$DSE_HOME/bin/dserc-env.sh" ]; then
        . "$DSE_HOME/bin/dserc-env.sh"
    elif [ -r "$DSE_CONF/dserc-env.sh" ]; then
        . "$DSE_CONF/dserc-env.sh"
    else
        echo "Location pointed to by DSE_HOME/bin/dserc-env.sh or DSE_CONF/bin/dserc-env.sh not readable"
        exit 1
    fi
fi

# Need Windows-style paths under cygwin
case "`uname`" in
    CYGWIN*)
        CLASSPATH="`cygpath -p -w "$CLASSPATH"`"
        CASSANDRA_CONF="`cygpath -p -w "$CASSANDRA_CONF"`"
    ;;
esac

if [ "$CASSANDRA_ENV_LOADED" != 1 ]; then
    # Run cassandra-env.sh to pick up JMX_PORT, but preserve
    # $JVM_OPTS as we don't want to inherit C*'s heap settings etc
    JVM_OPTS_SAVE=$JVM_OPTS
    if [ -f "$CASSANDRA_CONF/cassandra-env.sh" ]; then
        . "$CASSANDRA_CONF/cassandra-env.sh"
    fi
    JVM_OPTS=$JVM_OPTS_SAVE
fi

if [ -n "$DSE_SASL_PROTOCOL" ]; then
    DSE_OPTS="$DSE_OPTS -Ddse.sasl.protocol=$DSE_SASL_PROTOCOL"
fi

if [ -n "$DSE_LOGIN_CONFIG" ]; then
    DSE_OPTS="$DSE_OPTS -Djava.security.auth.login.config=$DSE_LOGIN_CONFIG"
fi

# If the user supplied a JMX port then use that instead of the one set in cassandra-env.sh
if [ -n "$USER_JMX_PORT" ]; then
    JMX_PORT=$USER_JMX_PORT
fi

# Set the proper client configuration implementation
DSE_OPTS="$DSE_OPTS -Ddse.client.configuration.impl=$client_config_impl"

CP="$DSE_CLASSPATH:$DSE_CONF:$CASSANDRA_CLASSPATH:$SOLR_CLASSPATH:$TOMCAT_CLASSPATH:$HADOOP_CLASSPATH:$SPARK_LIB_CLASSPATH:$GRAPH_CLASSPATH"

"$JAVA" $JAVA_AGENT \
        $JVM_OPTS \
        $DSE_OPTS \
        -cp "$CP" \
        -Dcassandra.storagedir=$cassandra_storagedir \
        -Dstorage-config=$CASSANDRA_CONF \
        -Dlogback.configurationFile=logback-tools.xml \
        $JVM_ARGS \
        com.datastax.bdp.tools.DseTool $DSE_JMX_CREDENTIALS $DSETOOL_CREDENTIALS --jmxport=$JMX_PORT $ARGS
